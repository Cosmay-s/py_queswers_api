import httpx
import time
import os

BASE_URL = "http://127.0.0.1:8000/api/v1"


def test_logging():
    """
    –¢–µ—Å—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ API.

    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
    - –Ω–∞–ª–∏—á–∏–µ –ø–∞–ø–∫–∏ logs –∏ —Ñ–∞–π–ª–∞ app.log;
    - —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –≤ –ª–æ–≥–∞—Ö –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞ –∏ –æ—Ç–≤–µ—Ç–∞;
    - –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Ñ—Ä–∞–∑ –≤ –ª–æ–≥–µ.
    """
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ...")

    time.sleep(1)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–∞–ø–∫–∏ logs
    assert os.path.exists("logs"), "–ü–∞–ø–∫–∞ logs –¥–æ–ª–∂–Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å"
    print("‚úÖ –ü–∞–ø–∫–∞ logs —Å–æ–∑–¥–∞–Ω–∞")

    with httpx.Client(timeout=30.0) as client:
        try:
            print("=== –°–æ–∑–¥–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ –∏ –æ—Ç–≤–µ—Ç–∞ ===")

            question_data = {
                "text": "–¢–µ—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–æ–≥–æ–≤"
            }
            response = client.post(
                f"{BASE_URL}/questions/",
                json=question_data
            )
            assert response.status_code == 201
            question_id = response.json()["id"]

            answer_data = {
                "text": "–¢–µ—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è –ª–æ–≥–æ–≤",
                "user_id": "logger_test"
            }
            response = client.post(
                f"{BASE_URL}/answers/questions/{question_id}/answers/",
                json=answer_data
            )
            assert response.status_code == 201
            answer_id = response.json()["id"]

            print("‚úÖ –í–æ–ø—Ä–æ—Å –∏ –æ—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ –ª–æ–≥–∞
            log_file = "logs/app.log"
            assert os.path.exists(log_file), (
                f"–§–∞–π–ª –ª–æ–≥–∞ {log_file} –¥–æ–ª–∂–µ–Ω —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å"
            )
            print("‚úÖ –§–∞–π–ª –ª–æ–≥–∞ —Å–æ–∑–¥–∞–Ω")

            # –ß—Ç–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å—Ç—Ä–æ–∫ –ª–æ–≥–∞
            with open(log_file, "r", encoding="utf-8") as f:
                lines = f.readlines()[-10:]

            log_content = ''.join(lines)
            print("üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥–µ:")
            for line in lines[-5:]:
                print(f"   {line.strip()}")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Ñ—Ä–∞–∑
            assert (
                "—Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞" in log_content.lower()
                or "—Å–æ–∑–¥–∞–Ω –≤–æ–ø—Ä–æ—Å" in log_content.lower()
            ), "–í –ª–æ–≥–∞—Ö –Ω–µ—Ç –∑–∞–ø–∏—Å–∏ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞"

            assert (
                "—Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞" in log_content.lower()
                or "—Å–æ–∑–¥–∞–Ω –æ—Ç–≤–µ—Ç" in log_content.lower()
            ), "–í –ª–æ–≥–∞—Ö –Ω–µ—Ç –∑–∞–ø–∏—Å–∏ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞"

            print("‚úÖ –ö–ª—é—á–µ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞–Ω—ã")

            # –û—á–∏—Å—Ç–∫–∞
            client.delete(f"{BASE_URL}/questions/{question_id}")

            print("üéâ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
            return True

        except Exception as e:
            print(f"‚ùå –¢–µ—Å—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–≤–∞–ª–µ–Ω: {e}")
            import traceback
            traceback.print_exc()
            return False


if __name__ == "__main__":
    success = test_logging()
    exit(0 if success else 1)
