import httpx
import time

BASE_URL = "http://127.0.0.1:8000/api/v1"


def test_business_rules():
    """
    –¢–µ—Å—Ç –±–∏–∑–Ω–µ—Å-–ø—Ä–∞–≤–∏–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.

    –§–æ–∫—É—Å–∏—Ä—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ –ª–æ–≥–∏–∫–∏ –∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∫ –ø–æ–≤–µ–¥–µ–Ω–∏—é:
    - –ù–µ–ª—å–∑—è —Å–æ–∑–¥–∞—Ç—å –æ—Ç–≤–µ—Ç –∫ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É;
    - –û–¥–∏–Ω —é–∑–µ—Ä –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ—Ç–≤–µ—Ç–æ–≤ –∫ –æ–¥–Ω–æ–º—É –≤–æ–ø—Ä–æ—Å—É;
    - –ü—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞ –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã —É–¥–∞–ª—è—é—Ç—Å—è –∫–∞—Å–∫–∞–¥–Ω–æ.

    –ù–µ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –±–∞–∑–æ–≤—ã–µ CRUD-–æ–ø–µ—Ä–∞—Ü–∏–∏, –∞ —Ç–æ–ª—å–∫–æ –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫—É.
    """
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∏–∑–Ω–µ—Å-–ø—Ä–∞–≤–∏–ª–∞...")

    time.sleep(1)

    with httpx.Client(timeout=30.0) as client:
        try:
            # 1. –ù–µ–ª—å–∑—è —Å–æ–∑–¥–∞—Ç—å –æ—Ç–≤–µ—Ç –∫ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
            print(
                "== –¢–µ—Å—Ç 1: –ù–µ–ª—å–∑—è —Å–æ–∑–¥–∞—Ç—å –æ—Ç–≤–µ—Ç –∫ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É =="
            )
            answer_data = {
                "text": "–≠—Ç–æ—Ç –æ—Ç–≤–µ—Ç –Ω–µ –¥–æ–ª–∂–µ–Ω —Å–æ–∑–¥–∞—Ç—å—Å—è",
                "user_id": "test_user",
            }
            response = client.post(
                f"{BASE_URL}/answers/questions/9999/answers/", json=answer_data
            )
            assert response.status_code == 404, "–î–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å —Å—Ç–∞—Ç—É—Å 404"
            print("‚úÖ –ù–µ–ª—å–∑—è —Å–æ–∑–¥–∞—Ç—å –æ—Ç–≤–µ—Ç –∫ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É")

            # 2. –û–¥–∏–Ω —é–∑–µ—Ä –º–æ–∂–µ—Ç –æ—Å—Ç–∞–≤–ª—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å
            print(
                "== –¢–µ—Å—Ç 2: –û–¥–∏–Ω —é–∑–µ—Ä –º–æ–∂–µ—Ç –æ—Å—Ç–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ—Ç–≤–µ—Ç–æ–≤ "
                "–∫ –æ–¥–Ω–æ–º—É –≤–æ–ø—Ä–æ—Å—É =="
            )

            # –°–æ–∑–¥–∞–µ–º –≤–æ–ø—Ä–æ—Å
            question_data = {
                "text": "–ú–æ–∂–µ—Ç –ª–∏ –æ–¥–∏–Ω —é–∑–µ—Ä –æ—Å—Ç–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ—Ç–≤–µ—Ç–æ–≤?"
            }
            response = client.post(
                f"{BASE_URL}/questions/",
                json=question_data
                )
            question_id = response.json()["id"]

            # –ü–µ—Ä–≤—ã–π –æ—Ç–≤–µ—Ç –æ—Ç —é–∑–µ—Ä–∞
            answer1_data = {
                "text": "–ü–µ—Ä–≤—ã–π –æ—Ç–≤–µ—Ç –æ—Ç —é–∑–µ—Ä–∞",
                "user_id": "same_user",
            }
            response = client.post(
                f"{BASE_URL}/answers/questions/{question_id}/answers/",
                json=answer1_data,
            )
            assert response.status_code == 201
            answer1_id = response.json()["id"]

            # –í—Ç–æ—Ä–æ–π –æ—Ç–≤–µ—Ç –æ—Ç —Ç–æ–≥–æ –∂–µ —é–∑–µ—Ä–∞
            answer2_data = {
                "text": "–í—Ç–æ—Ä–æ–π –æ—Ç–≤–µ—Ç –æ—Ç —Ç–æ–≥–æ –∂–µ —é–∑–µ—Ä–∞",
                "user_id": "same_user",
            }
            response = client.post(
                f"{BASE_URL}/answers/questions/{question_id}/answers/",
                json=answer2_data,
            )
            assert response.status_code == 201
            answer2_id = response.json()["id"]

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±–∞ –æ—Ç–≤–µ—Ç–∞ —Å–æ–∑–¥–∞–ª–∏—Å—å
            response = client.get(f"{BASE_URL}/questions/{question_id}")
            question = response.json()
            assert len(question["answers"]) == 2
            assert question["answers"][0]["user_id"] == "same_user"
            assert question["answers"][1]["user_id"] == "same_user"
            print(
                "‚úÖ –û–¥–∏–Ω —é–∑–µ—Ä –º–æ–∂–µ—Ç –æ—Å—Ç–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ—Ç–≤–µ—Ç–æ–≤ "
                "–∫ –æ–¥–Ω–æ–º—É –≤–æ–ø—Ä–æ—Å—É"
            )

            # 3. –¢–µ—Å—Ç: –ö–∞—Å–∫–∞–¥–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞
            print(
                "=== –¢–µ—Å—Ç 3: –ö–∞—Å–∫–∞–¥–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞ ==="
                )

            # –£–¥–∞–ª—è–µ–º –≤–æ–ø—Ä–æ—Å
            response = client.delete(f"{BASE_URL}/questions/{question_id}")
            assert response.status_code == 200

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç—ã —É–¥–∞–ª–∏–ª–∏—Å—å
            response = client.get(f"{BASE_URL}/answers/{answer1_id}")
            assert response.status_code == 404
            response = client.get(f"{BASE_URL}/answers/{answer2_id}")
            assert response.status_code == 404
            print("‚úÖ –û—Ç–≤–µ—Ç—ã —É–¥–∞–ª—è—é—Ç—Å—è –∫–∞—Å–∫–∞–¥–Ω–æ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞")

            print("üéâ –í—Å–µ –±–∏–∑–Ω–µ—Å-–ø—Ä–∞–≤–∏–ª–∞ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
            return True

        except Exception as e:
            print(f"‚ùå –¢–µ—Å—Ç –±–∏–∑–Ω–µ—Å-–ø—Ä–∞–≤–∏–ª –ø—Ä–æ–≤–∞–ª–µ–Ω: {e}")
            import traceback

            traceback.print_exc()
            return False


if __name__ == "__main__":
    success = test_business_rules()
    exit(0 if success else 1)
