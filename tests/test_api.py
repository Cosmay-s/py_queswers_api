import httpx
import json
import time

BASE_URL = "http://127.0.0.1:8000/api/v1"


def test_api():
    """–¢–µ—Å—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö endpoints API"""
    print("üß™ Testing API endpoints...")

    # –î–∞–µ–º —Å–µ—Ä–≤–µ—Ä—É –≤—Ä–µ–º—è –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è
    time.sleep(2)

    with httpx.Client(timeout=30.0) as client:
        try:
            # 1. –°–æ–∑–¥–∞–µ–º –≤–æ–ø—Ä–æ—Å
            question_data = {"text": "What is FastAPI?"}
            response = client.post(f"{BASE_URL}/questions/",
                                   json=question_data)
            print(f"‚úÖ Create question: {response.status_code}")
            if response.status_code != 201:
                print(f"Error: {response.text}")
                return

            question = response.json()
            question_id = question["id"]

            # 2. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤
            response = client.get(f"{BASE_URL}/questions/")
            print(f"‚úÖ Get questions: {response.status_code}")
            if response.status_code != 200:
                print(f"Error: {response.text}")
                return

            # 3. –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å
            response = client.get(f"{BASE_URL}/questions/{question_id}")
            print(f"‚úÖ Get question: {response.status_code}")
            if response.status_code != 200:
                print(f"Error: {response.text}")
                return

            question_detail = response.json()
            print(f"Question details: {json.dumps(question_detail,
                                                  indent=2,
                                                  default=str)}")

            # 4. –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
            answer_data = {"text": "FastAPI is a modern web framework",
                           "user_id": "test_user"}

            response = client.post(
                f"{BASE_URL}/questions/{question_id}/answers",
                json=answer_data)
            print(f"‚úÖ Create answer: {response.status_code}")
            if response.status_code != 201:
                print(f"Error: {response.text}")
                return

            answer = response.json()
            answer_id = answer["id"]

            # 5. –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç
            response = client.get(f"{BASE_URL}/answers/{answer_id}")
            print(f"‚úÖ Get answer: {response.status_code}")
            if response.status_code != 200:
                print(f"Error: {response.text}")
                return

            # 6. –£–¥–∞–ª—è–µ–º –≤–æ–ø—Ä–æ—Å (–¥–æ–ª–∂–Ω—ã —É–¥–∞–ª–∏—Ç—å—Å—è –∏ –æ—Ç–≤–µ—Ç—ã)
            response = client.delete(f"{BASE_URL}/questions/{question_id}")
            print(f"‚úÖ Delete question: {response.status_code}")
            if response.status_code != 200:
                print(f"Error: {response.text}")
                return

            # 7. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—Ç–≤–µ—Ç —É–¥–∞–ª–∏–ª—Å—è –∫–∞—Å–∫–∞–¥–Ω–æ
            response = client.get(f"{BASE_URL}/answers/{answer_id}")
            print(
                f"‚úÖ Cascade delete: {response.status_code} (should be 404)")

            print("üéâ API test completed!")

        except Exception as e:
            print(f"‚ùå Exception during test: {e}")
            import traceback
            traceback.print_exc()


if __name__ == "__main__":
    test_api()
