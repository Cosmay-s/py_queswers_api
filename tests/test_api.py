import httpx
import time
import os
import traceback

BASE_URL = "http://127.0.0.1:8000/api/v1"


def test_api():
    """
    –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç API —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π, –ª–æ–≥–∏–∫–æ–π –∏ –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ª–æ–≥–æ–≤.

    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
    - —Å–æ–∑–¥–∞–Ω–∏–µ, –ø–æ–ª—É—á–µ–Ω–∏–µ, —É–¥–∞–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤;
    - –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤;
    - –±–∏–∑–Ω–µ—Å-–ø—Ä–∞–≤–∏–ª–∞ (–æ—Ç–≤–µ—Ç –∫ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É, –∫–∞—Å–∫–∞–¥–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ);
    - –±–∞–∑–æ–≤—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é (–∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç);
    - –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ñ–∞–π–ª logs/app.log.
    """
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º API —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º...")

    time.sleep(1)

    with httpx.Client(timeout=30.0) as client:
        try:
            print("=== –û—Å–Ω–æ–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ ===")

            question_data = {"text": "–ß—Ç–æ —Ç–∞–∫–æ–µ Python?"}
            response = client.post(
                f"{BASE_URL}/questions/", json=question_data
            )
            assert response.status_code == 201
            question = response.json()
            question_id = question["id"]
            print("‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –≤–∞–ª–∏–¥–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞")

            duplicate_question = {"text": "  —á—Ç–æ —Ç–∞–∫–æ–µ python?  "}
            response = client.post(
                f"{BASE_URL}/questions/", json=duplicate_question
            )
            assert response.status_code == 400
            print("‚úÖ –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤")

            answer_data = {
                "text": "Python ‚Äî –≤—ã—Å–æ–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è",
                "user_id": "user123"
            }
            response = client.post(
                f"{BASE_URL}/answers/questions/{question_id}/answers/",
                json=answer_data
            )
            assert response.status_code == 201
            answer = response.json()
            answer_id = answer["id"]
            print("‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –≤–∞–ª–∏–¥–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞")

            print("=== –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∏–∑–Ω–µ—Å-–ø—Ä–∞–≤–∏–ª ===")

            response = client.post(
                f"{BASE_URL}/answers/questions/9999/answers/",
                json=answer_data
            )
            assert response.status_code == 404
            print("‚úÖ –ù–µ–ª—å–∑—è —Å–æ–∑–¥–∞—Ç—å –æ—Ç–≤–µ—Ç –∫ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É")

            another_answer = {
                "text": "Python –æ—Ç–ª–∏—á–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏",
                "user_id": "user123"
            }
            response = client.post(
                f"{BASE_URL}/answers/questions/{question_id}/answers/",
                json=another_answer
            )
            assert response.status_code == 201
            print("‚úÖ –û–¥–∏–Ω —é–∑–µ—Ä –º–æ–∂–µ—Ç –æ—Å—Ç–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ—Ç–≤–µ—Ç–æ–≤")

            response = client.get(f"{BASE_URL}/questions/{question_id}")
            question_data = response.json()
            assert len(question_data.get("answers", [])) >= 1, (
                "–û–∂–∏–¥–∞–ª–æ—Å—å –º–∏–Ω–∏–º—É–º 1 –æ—Ç–≤–µ—Ç"
            )

            response = client.delete(f"{BASE_URL}/questions/{question_id}")
            assert response.status_code == 200

            response = client.get(f"{BASE_URL}/answers/{answer_id}")
            assert response.status_code == 404
            print("‚úÖ –ö–∞—Å–∫–∞–¥–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç")

            print("=== –í–∞–ª–∏–¥–∞—Ü–∏—è ===")

            valid_question = {"text": "–í–æ–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"}
            response = client.post(
                f"{BASE_URL}/questions/", json=valid_question
            )
            assert response.status_code == 201
            new_question_id = response.json()["id"]

            invalid_answer = {"text": "No", "user_id": "test"}
            response = client.post(
                f"{BASE_URL}/answers/questions/{new_question_id}/answers/",
                json=invalid_answer
            )
            assert response.status_code == 422
            print("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –æ—Ç–≤–µ—Ç–∞")

            delete_response = client.delete(
                f"{BASE_URL}/questions/{new_question_id}"
            )
            assert delete_response.status_code == 200

            print("=== –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===")
            log_file = "logs/app.log"
            if os.path.exists(log_file):
                with open(log_file, "r", encoding="utf-8") as f:
                    logs = f.read()

                assert (
                    "–≤–æ–ø—Ä–æ—Å" in logs.lower() or "question" in logs.lower()
                ), "–õ–æ–≥–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –∑–∞–ø–∏—Å–µ–π –æ –≤–æ–ø—Ä–æ—Å–∞—Ö"

                assert (
                    "–æ—Ç–≤–µ—Ç" in logs.lower() or "answer" in logs.lower()
                ), "–õ–æ–≥–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –∑–∞–ø–∏—Å–µ–π –æ–± –æ—Ç–≤–µ—Ç–∞—Ö"

                print("‚úÖ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            else:
                print("‚ö†Ô∏è –õ–æ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã (–≤–æ–∑–º–æ–∂–Ω–æ, –ª–æ–≥ –ø–∏—à–µ—Ç—Å—è –≤ stdout)")

            print("üéâ –¢–µ—Å—Ç API –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            return True

        except Exception as e:
            print(f"‚ùå –¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω: {e}")
            traceback.print_exc()
            return False


if __name__ == "__main__":
    success = test_api()
    exit(0 if success else 1)
